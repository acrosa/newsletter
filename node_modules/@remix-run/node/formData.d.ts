/// <reference types="node" />
import type { Readable } from "stream";
export declare type UploadHandlerArgs = {
    name: string;
    stream: Readable;
    filename: string;
    encoding: string;
    mimetype: string;
};
export declare type UploadHandler = (args: UploadHandlerArgs) => Promise<string | File | undefined>;
export declare function isFile(blob: Blob): blob is File;
declare class NodeFormData implements FormData {
    private _fields;
    constructor(form?: any);
    append(name: string, value: string | Blob, fileName?: string): void;
    delete(name: string): void;
    get(name: string): FormDataEntryValue | null;
    getAll(name: string): FormDataEntryValue[];
    has(name: string): boolean;
    set(name: string, value: string | Blob, fileName?: string): void;
    forEach(callbackfn: (value: FormDataEntryValue, key: string, parent: FormData) => void, thisArg?: any): void;
    entries(): IterableIterator<[string, FormDataEntryValue]>;
    keys(): IterableIterator<string>;
    values(): IterableIterator<FormDataEntryValue>;
    [Symbol.iterator](): IterableIterator<[string, FormDataEntryValue]>;
}
export { NodeFormData as FormData };
