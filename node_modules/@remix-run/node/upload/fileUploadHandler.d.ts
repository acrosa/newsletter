/// <reference types="node" />
import type { UploadHandler } from "../formData";
export declare type FileUploadHandlerFilterArgs = {
    filename: string;
    encoding: string;
    mimetype: string;
};
export declare type FileUploadHandlerPathResolverArgs = {
    filename: string;
    encoding: string;
    mimetype: string;
};
/**
 * Chooses the path of the file to be uploaded. If a string is not
 * returned the file will not be written.
 */
export declare type FileUploadHandlerPathResolver = (args: FileUploadHandlerPathResolverArgs) => string | undefined;
export declare type FileUploadHandlerOptions = {
    /**
     * Avoid file conflicts by appending a count on the end of the filename
     * if it already exists on disk. Defaults to `true`.
     */
    avoidFileConflicts?: boolean;
    /**
     * The directory to write the upload.
     */
    directory?: string | FileUploadHandlerPathResolver;
    /**
     * The name of the file in the directory. Can be a relative path, the directory
     * structure will be created if it does not exist.
     */
    file?: FileUploadHandlerPathResolver;
    /**
     * The maximum upload size allowed. If the size is exceeded an error will be thrown.
     * Defaults to 3000000B (3MB).
     */
    maxFileSize?: number;
    /**
     *
     * @param filename
     * @param mimetype
     * @param encoding
     */
    filter?(args: FileUploadHandlerFilterArgs): boolean | Promise<boolean>;
};
export declare function createFileUploadHandler({ directory, avoidFileConflicts, file, filter, maxFileSize }: FileUploadHandlerOptions): UploadHandler;
export declare class NodeOnDiskFile implements File {
    private filepath;
    size: number;
    type: string;
    name: string;
    lastModified: number;
    webkitRelativePath: string;
    constructor(filepath: string, size: number, type: string);
    arrayBuffer(): Promise<ArrayBuffer>;
    slice(start?: any, end?: any, contentType?: any): Blob;
    stream(): ReadableStream<any>;
    stream(): NodeJS.ReadableStream;
    text(): Promise<string>;
}
