/**
 * @remix-run/node v1.1.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var stream = require('stream');
var file = require('@web-std/file');
var meter = require('./meter.js');

function createMemoryUploadHandler({
  filter,
  maxFileSize = 3000000
}) {
  return async ({
    name,
    stream,
    filename,
    encoding,
    mimetype
  }) => {
    if (filter && !(await filter({
      filename,
      encoding,
      mimetype
    }))) {
      stream.resume();
      return;
    }

    let bufferStream = new BufferStream();
    await new Promise((resolve, reject) => {
      let meter$1 = new meter.Meter(name, maxFileSize);
      let aborted = false;

      async function abort(error) {
        if (aborted) return;
        aborted = true;
        stream.unpipe();
        meter$1.unpipe();
        stream.removeAllListeners();
        meter$1.removeAllListeners();
        bufferStream.removeAllListeners();
        reject(error);
      }

      stream.on("error", abort);
      meter$1.on("error", abort);
      bufferStream.on("error", abort);
      bufferStream.on("finish", resolve);
      stream.pipe(meter$1).pipe(bufferStream);
    });
    return new file.File(bufferStream.data, filename, {
      type: mimetype
    });
  };
}

class BufferStream extends stream.Transform {
  constructor() {
    super();
    this.data = [];
  }

  _transform(chunk, _, callback) {
    this.data.push(chunk);
    callback();
  }

}

exports.createMemoryUploadHandler = createMemoryUploadHandler;
